@page "/Players"

@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation

@using BasketLeague2.Utils.Models

<h3>PlayerList</h3>

<button Class="btn btn-primary" @onclick="GeneratePlayers">GENERATE RANDOM PLAYER</button>

<Table Striped>
    <TableHeader ThemeContrast="ThemeContrast.Light">
        <TableRow>
            <TableHeaderCell>NOMBRE</TableHeaderCell>
            <TableHeaderCell>EQUIPO</TableHeaderCell>
            <TableHeaderCell>TIRO DOBLE</TableHeaderCell>
            <TableHeaderCell>TIRO TRIPLE</TableHeaderCell>
            <TableHeaderCell>FÍSICO</TableHeaderCell>
            <TableHeaderCell>PLAYMAKING</TableHeaderCell>
            <TableHeaderCell>REBOTE</TableHeaderCell>
            <TableHeaderCell>DEFENSA</TableHeaderCell>
            <TableHeaderCell>MEDIA</TableHeaderCell>
            <TableHeaderCell></TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (var p in _players)
        {
            <TableRow>
                <TableRowCell>@p.Name "@p.Nickname"</TableRowCell>
                <TableRowCell>@p.Team</TableRowCell>
                <TableRowCell>@p.InsideScoring</TableRowCell>
                <TableRowCell>@p.OutsideScoring</TableRowCell>
                <TableRowCell>@p.Athleticism</TableRowCell>
                <TableRowCell>@p.Playmaking</TableRowCell>
                <TableRowCell>@p.Rebounding</TableRowCell>
                <TableRowCell>@p.Defending</TableRowCell>
                <TableRowCell>@p.Overall</TableRowCell>
                <TableRowCell>
                    <button class="btn btn-primary" @onclick="_ => LoadJugador(p.Codigo)">INFO</button>
                </TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>

@code {
    private string _jsonResult = "";

    private IEnumerable<Player> _players = new Player[] { };

    protected override async Task OnInitializedAsync()
    {
        await GetPlayers();
    }

    private async Task GetPlayers()
    {
        var p = await Http.GetFromJsonAsync<IEnumerable<Player>>("data/players.json");
        _players = _players.Concat(p!.OrderByDescending(player => player.Overall));
    }

    private async Task GeneratePlayers()
    {
        var players = Player.RandomPlayer(10);
        _jsonResult = System.Text.Json.JsonSerializer.Serialize(players);
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", _jsonResult);
    }

    private void LoadJugador(int codigo)
    {
        Navigation.NavigateTo($"Players/Player/{codigo}");
    }

}