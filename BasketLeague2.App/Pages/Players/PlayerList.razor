@page "/Players"
@using BasketLeague2.Utils.Models
@using Badge = Blazorise.Badge

@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Players</PageTitle>

<h3>PlayerList</h3>

<TextEdit Style="width:25%" Text="@_customFilterValue" TextChanged="@OnCustomFilterValueChanged"></TextEdit>
<DataGrid @ref="_dataGrid"
          TItem="Player"
          Data="@_players"
          Responsive
          Sortable
          ShowPager
          CustomFilter="@OnCustomFilter"
          ShowPageSizes
          PagerPosition="DataGridPagerPosition.Bottom"
          PagerOptions="new DataGridPagerOptions { ButtonSize = Size.Small }"
          SortMode="DataGridSortMode.Single"
          PageSize="10">
    <DataGridColumns>
        <DataGridCommandColumn/>
        <DataGridColumn Field="@nameof(Player.Name)" Caption="NOMBRE">
            <DisplayTemplate>
                @if (context.Nickname.StartsWith("Shiny "))
                {
                    <p>@context.Name "@context.Nickname[6..]" <Icon Name="IconName.Star"/></p>
                }
                else
                {
                    <p>@context.Name "@context.Nickname"</p>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(Player.Team)" Caption="EQUIPO"/>
        <DataGridColumn Field="@nameof(Player.InsideScoring)" Caption="TIRO DOBLE"/>
        <DataGridColumn Field="@nameof(Player.OutsideScoring)" Caption="TIRO TRIPLE"/>
        <DataGridColumn Field="@nameof(Player.Athleticism)" Caption="FÍSICO"/>
        <DataGridColumn Field="@nameof(Player.Playmaking)" Caption="PLAYMAKING"/>
        <DataGridColumn Field="@nameof(Player.Rebounding)" Caption="REBOTE"/>
        <DataGridColumn Field="@nameof(Player.Defending)" Caption="DEFENSA"/>
        <DataGridColumn Field="@nameof(Player.Overall)" Caption="MEDIA">
            <DisplayTemplate>@context.CalculateOverall()</DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(Player.Codigo)">
            <DisplayTemplate>
                <button class="btn btn-primary" @onclick="_ => LoadJugador(context.Codigo)">INFO</button>
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
    <PageButtonTemplate>
        <Span TextColor="TextColor.Info">
            @context.PageNumber
        </Span>
    </PageButtonTemplate>
    <NextPageButtonTemplate>
        <Icon Name="IconName.StepForward" TextColor="TextColor.Info"/>
    </NextPageButtonTemplate>
    <PreviousPageButtonTemplate>
        <Icon Name="IconName.StepBackward" TextColor="TextColor.Info"/>
    </PreviousPageButtonTemplate>
    <LastPageButtonTemplate>
        <Icon Name="IconName.Forward" TextColor="TextColor.Info"/>
    </LastPageButtonTemplate>
    <FirstPageButtonTemplate>
        <Icon Name="IconName.Backward" TextColor="TextColor.Info"/>
    </FirstPageButtonTemplate>
    <TotalItemsTemplate>
        <Badge Color="Color.Info">@context.TotalItems items</Badge>
    </TotalItemsTemplate>
    <TotalItemsShortTemplate>
        <Badge Color="Color.Info">@context.CurrentPageSize</Badge>
    </TotalItemsShortTemplate>
    <PageSelectorTemplate>
        <Select TextColor="TextColor.Info" @bind-SelectedValue="@context.CurrentPage" Size="Size.Small">
            @for (var i = context.FirstVisiblePage; i <= context.LastVisiblePage; ++i)
            {
                var pageNumber = i;

                <SelectItem Value="@pageNumber">@pageNumber</SelectItem>
            }
        </Select>
    </PageSelectorTemplate>
</DataGrid>

@code {

    private string _customFilterValue = "";
    private DataGrid<Player> _dataGrid = new();

    private IEnumerable<Player> _players = new Player[] { };

    protected override async Task OnInitializedAsync()
    {
        await GetPlayers();
    }

    private async Task GetPlayers()
    {
        var p = await Http.GetFromJsonAsync<IEnumerable<Player>>("data/players.json");
        _players = _players.Concat(p!.OrderByDescending(player => player.CalculateOverall()));
    }

    private void LoadJugador(int codigo)
    {
        Navigation.NavigateTo($"Players/Player/{codigo}");
    }

    private Task OnCustomFilterValueChanged(string e)
    {
        _customFilterValue = e;
        return _dataGrid.Reload();
    }

    private bool OnCustomFilter(Player model)
    {
        if (string.IsNullOrEmpty(_customFilterValue))
            return true;

        return model.Name.Contains(_customFilterValue, StringComparison.OrdinalIgnoreCase) || model.Nickname.Contains(_customFilterValue, StringComparison.OrdinalIgnoreCase);
    }

}