@page "/Players/Player/{Codigo}"

@inject HttpClient Http
@using Badge = BasketLeague2.Utils.Models.Badge
@using BasketLeague2.Utils.Models
@using BasketLeague2.Utils.Utils

<Breadcrumb>
    <BreadcrumbItem>
        <BreadcrumbLink To="/Players">Players</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbItem Active>
        <BreadcrumbLink To="#">Player</BreadcrumbLink>
    </BreadcrumbItem>
</Breadcrumb>

<PageTitle>Player @_player.Codigo</PageTitle>

<h3>PlayerStats</h3>

@foreach (var badge in _badges)
{
    <Badge Color="@badge.Color">
        <Tooltip Text="@badge.Description">
            @badge.Name
        </Tooltip>
    </Badge>
}

<Table Striped>
    <TableHeader ThemeContrast="ThemeContrast.Light">
        <TableRow>
            <TableHeaderCell>NOMBRE</TableHeaderCell>
            <TableHeaderCell>TIRO DOBLE</TableHeaderCell>
            <TableHeaderCell>TIRO TRIPLE</TableHeaderCell>
            <TableHeaderCell>FÍSICO</TableHeaderCell>
            <TableHeaderCell>PLAYMAKING</TableHeaderCell>
            <TableHeaderCell>REBOTE</TableHeaderCell>
            <TableHeaderCell>DEFENSA</TableHeaderCell>
            <TableHeaderCell>MEDIA</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <TableRow>
            <TableRowCell>
                @_player.Name @(_player.Nickname.StartsWith("Shiny ") ? _player.Nickname[6..] : _player.Nickname)
                @if (_player.Nickname.StartsWith("Shiny "))
                {
                    <Icon Name="IconName.Star"/>
                }
            </TableRowCell>
            <TableRowCell>@_player.InsideScoring</TableRowCell>
            <TableRowCell>@_player.OutsideScoring</TableRowCell>
            <TableRowCell>@_player.Athleticism</TableRowCell>
            <TableRowCell>@_player.Playmaking</TableRowCell>
            <TableRowCell>@_player.Rebounding</TableRowCell>
            <TableRowCell>@_player.Defending</TableRowCell>
            <TableRowCell>@_player.CalculateOverall()</TableRowCell>
        </TableRow>
    </TableBody>
</Table>

<h3>Season</h3>
<Select TValue="string" Size="Size.Medium" SelectedValue="_season" SelectedValueChanged="@OnSeasonValueChanged">
    @foreach (var s in LeagueUtils.Seasons)
    {
        <SelectItem Value="s">@s</SelectItem>
    }
</Select>

<h3>Play by play</h3>
<Table Striped>
    <TableHeader ThemeContrast="ThemeContrast.Light">
        <TableRow>
            <TableHeaderCell>TIRO DOBLE</TableHeaderCell>
            <TableHeaderCell>TIRO TRIPLE</TableHeaderCell>
            <TableHeaderCell>FÍSICO</TableHeaderCell>
            <TableHeaderCell>PLAYMAKING</TableHeaderCell>
            <TableHeaderCell>REBOTE</TableHeaderCell>
            <TableHeaderCell>DEFENSA</TableHeaderCell>
            <TableHeaderCell>TOTAL</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (var day in _diary)
        {
            <TableRow>
                <TableRowCell>@day[1]</TableRowCell>
                <TableRowCell>@day[2]</TableRowCell>
                <TableRowCell>@day[3]</TableRowCell>
                <TableRowCell>@day[4]</TableRowCell>
                <TableRowCell>@day[5]</TableRowCell>
                <TableRowCell>@day[6]</TableRowCell>
                <TableRowCell>@day.Skip(1).Sum()</TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>

<h3>Total</h3>

<Table Striped>
    <TableHeader ThemeContrast="ThemeContrast.Light">
        <TableRow>
            <TableHeaderCell>TIRO DOBLE</TableHeaderCell>
            <TableHeaderCell>TIRO TRIPLE</TableHeaderCell>
            <TableHeaderCell>FÍSICO</TableHeaderCell>
            <TableHeaderCell>PLAYMAKING</TableHeaderCell>
            <TableHeaderCell>REBOTE</TableHeaderCell>
            <TableHeaderCell>DEFENSA</TableHeaderCell>
            <TableHeaderCell>TOTAL</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <TableRow>
            <TableRowCell>@_totals[0]</TableRowCell>
            <TableRowCell>@_totals[1]</TableRowCell>
            <TableRowCell>@_totals[2]</TableRowCell>
            <TableRowCell>@_totals[3]</TableRowCell>
            <TableRowCell>@_totals[4]</TableRowCell>
            <TableRowCell>@_totals[5]</TableRowCell>
            <TableRowCell>@_totals.Sum()</TableRowCell>
        </TableRow>
    </TableBody>
</Table>

@code {

    [Parameter] public string Codigo { get; set; } = "";

    private Player _player = new();
    private List<Badge> _badges = new();
    private List<int[]> _diary = new();
    private int[] _totals = { 0, 0, 0, 0, 0, 0 };

    private string _season = LeagueUtils.CurrentSeason;

    protected override async Task OnInitializedAsync()
    {
        await GetPlayer();

        await GetPlayerBadges();

        await GetPlayerStatistics(_season);
    }

    private async Task GetPlayer()
    {
        var p = await Http.GetFromJsonAsync<IEnumerable<Player>>("data/players.json");
        _player = p!.Single(player => player.Codigo == int.Parse(Codigo));
    }

    private async Task GetPlayerBadges()
    {
        var badges = await Http.GetFromJsonAsync<IEnumerable<Badge>>("data/badges/PlayersBadges.json");
        _badges.AddRange(badges!.Where(b => b.Id == _player.Codigo));
    }

    private async Task GetPlayerStatistics(string season)
    {
        var r = await Http.GetFromJsonAsync<List<AdvancedResult>>($"data/results/R_{season}.json");
        var playerCode = int.Parse(Codigo);

        var allStats = r!.SelectMany(result => result.Stats1.Concat(result.Stats2));
        
        foreach (var stats in allStats.Where(s => s[0] == playerCode))
        {
            _diary.Add(stats);
            for (var i = 1; i <= 6; i++)
            {
                _totals[i - 1] += stats[i];
            }
        }
    }

    async Task OnSeasonValueChanged(string value)
    {
        _season = value;

        _diary.Clear();
        _totals = new[] { 0, 0, 0, 0, 0, 0 };
        await GetPlayerStatistics(value);
    }

}