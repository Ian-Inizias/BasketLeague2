@page "/Results/{Season}"
@using BasketLeague2.Utils.Models

@inject HttpClient Http

<h3>Results</h3>

<TextEdit Style="width:25%" Text="@_customFilterValue" TextChanged="@OnCustomFilterValueChanged"></TextEdit>
<DataGrid @ref="_dataGrid"
          TItem="AdvancedResult"
          Data="@_resultados"
          Responsive
          Sortable
          ShowPager
          CustomFilter="@OnCustomFilter"
          ShowPageSizes
          PagerPosition="DataGridPagerPosition.Bottom"
          PagerOptions="new DataGridPagerOptions { ButtonSize = Size.Small }"
          SortMode="DataGridSortMode.Single"
          PageSize="10"
          DetailRowStartsVisible="false"
          DetailRowTrigger="@(e => e.Item.Stats1?.Length > 0)">
    <DataGridColumns>
        <DataGridCommandColumn/>
        <DataGridColumn Field="@nameof(Result.Fecha)" Caption="FECHA"/>
        <DataGridColumn Field="@nameof(Result.Equipo1)" Caption="EQUIPO 1">
            <DisplayTemplate>
                @{
                    var result = context as Result;

                    if (result.Resultado1 > result.Resultado2)
                    {
                        <Label TextColor="TextColor.Success">@result.Equipo1</Label>
                    }
                    else
                    {
                        <Label TextColor="TextColor.Danger">@result.Equipo1</Label>
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(Result.Resultado1)" Caption="RESULTADO 1"/>
        <DataGridColumn Field="@nameof(Result.Equipo2)" Caption="EQUIPO 2">
            <DisplayTemplate>
                @{
                    var result = context as Result;

                    if (result.Resultado1 < result.Resultado2)
                    {
                        <Label TextColor="TextColor.Success">@result.Equipo2</Label>
                    }
                    else
                    {
                        <Label TextColor="TextColor.Danger">@result.Equipo2</Label>
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(Result.Resultado2)" Caption="RESULTADO 2"/>
    </DataGridColumns>
    <DetailRowTemplate>
        @{
            var stats1 = context.Stats1.ConvertToPlayerResult();
            var stats2 = context.Stats2.ConvertToPlayerResult();

            <DataGrid TItem="PlayerResult"
                      Data="stats1"
                      Sortable="false"
                      ShowCaptions="true">
                <DataGridCommandColumn/>
                <DataGridColumn Field="@nameof(PlayerResult.Codigo)" Caption="Jugador">
                    <DisplayTemplate Context="prContext">
                        @{
                            var player = _players.First(p => p.Codigo == prContext.Codigo);

                            <Label>@player.Name "@player.Nickname"</Label>
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn Field="@nameof(PlayerResult.Dobles)" Caption="Dobles"/>
                <DataGridColumn Field="@nameof(PlayerResult.Triples)" Caption="Triples"/>
                <DataGridColumn Field="@nameof(PlayerResult.Athleticism)" Caption="Atletismo"/>
                <DataGridColumn Field="@nameof(PlayerResult.Playmaking)" Caption="Jugadas"/>
                <DataGridColumn Field="@nameof(PlayerResult.Rebounding)" Caption="Rebotes"/>
                <DataGridColumn Field="@nameof(PlayerResult.Defending)" Caption="Defensa"/>
                <DataGridColumn Field="@nameof(PlayerResult.Total)" Caption="TOTAL"/>
            </DataGrid>

            <DataGrid TItem="PlayerResult"
                      Data="stats2"
                      Sortable="false"
                      ShowCaptions="true">
                <DataGridCommandColumn/>
                <DataGridColumn Field="@nameof(PlayerResult.Codigo)" Caption="Jugador">
                    <DisplayTemplate Context="prContext">
                        @{
                            var player = _players.First(p => p.Codigo == prContext.Codigo);

                            <Label>@player.Name "@player.Nickname"</Label>
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn Field="@nameof(PlayerResult.Dobles)" Caption="Dobles"/>
                <DataGridColumn Field="@nameof(PlayerResult.Triples)" Caption="Triples"/>
                <DataGridColumn Field="@nameof(PlayerResult.Athleticism)" Caption="Atletismo"/>
                <DataGridColumn Field="@nameof(PlayerResult.Playmaking)" Caption="Jugadas"/>
                <DataGridColumn Field="@nameof(PlayerResult.Rebounding)" Caption="Rebotes"/>
                <DataGridColumn Field="@nameof(PlayerResult.Defending)" Caption="Defensa"/>
                <DataGridColumn Field="@nameof(PlayerResult.Total)" Caption="TOTAL"/>
            </DataGrid>
        }
    </DetailRowTemplate>
    <PageButtonTemplate>
        <Span TextColor="TextColor.Success">
            @context.PageNumber
        </Span>
    </PageButtonTemplate>
    <NextPageButtonTemplate>
        <Icon Name="IconName.StepForward" TextColor="TextColor.Success"/>
    </NextPageButtonTemplate>
    <PreviousPageButtonTemplate>
        <Icon Name="IconName.StepBackward" TextColor="TextColor.Success"/>
    </PreviousPageButtonTemplate>
    <LastPageButtonTemplate>
        <Icon Name="IconName.Forward" TextColor="TextColor.Success"/>
    </LastPageButtonTemplate>
    <FirstPageButtonTemplate>
        <Icon Name="IconName.Backward" TextColor="TextColor.Success"/>
    </FirstPageButtonTemplate>
    <TotalItemsTemplate>
        <Badge Color="Color.Success">@context.TotalItems items</Badge>
    </TotalItemsTemplate>
    <TotalItemsShortTemplate>
        <Badge Color="Color.Success">@context.CurrentPageSize</Badge>
    </TotalItemsShortTemplate>
    <PageSelectorTemplate>
        <Select TextColor="TextColor.Success" @bind-SelectedValue="@context.CurrentPage" Size="Size.Small">
            @for (var i = context.FirstVisiblePage; i <= context.LastVisiblePage; ++i)
            {
                var pageNumber = i;

                <SelectItem Value="@pageNumber">@pageNumber</SelectItem>
            }
        </Select>
    </PageSelectorTemplate>
</DataGrid>

@code {

    [Parameter] public string Season { get; set; } = "";

    private IEnumerable<AdvancedResult> _resultados = new AdvancedResult[] { };
    private IEnumerable<Team> _teams = new Team[] { };
    private IEnumerable<Player> _players = new Player[] { };

    private DataGrid<AdvancedResult> _dataGrid = new();
    private string _customFilterValue = "";

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetTeams();

        await GetResults();

        await GetPlayers();

        StateHasChanged();
    }

    private async Task GetTeams()
    {
        _teams = new Team[] { };
        var t = await Http.GetFromJsonAsync<IEnumerable<Team>>("data/teams.json");
        _teams = _teams.Concat(t!.OrderBy(team => team.NombreCompleto));
    }

    private async Task GetResults()
    {
        _resultados = new AdvancedResult[] { };
        var r = await Http.GetFromJsonAsync<List<AdvancedResult>>($"data/results/R_{Season}.json");

        foreach (var result in r!)
        {
            result.Equipo1 = _teams.First(team => team.Codigo == int.Parse(result.Equipo1)).NombreCompleto;
            result.Equipo2 = _teams.First(team => team.Codigo == int.Parse(result.Equipo2)).NombreCompleto;
        }

        _resultados = _resultados.Concat(r!.OrderBy(result => result.Fecha));
    }

    private async Task GetPlayers()
    {
        _players = new Player[] { };
        var p = await Http.GetFromJsonAsync<IEnumerable<Player>>("data/players.json");
        _players = _players.Concat(p!.OrderBy(player => player.Codigo));
    }

    private Task OnCustomFilterValueChanged(string e)
    {
        _customFilterValue = e;
        return _dataGrid.Reload();
    }

    private bool OnCustomFilter(Result model)
    {
        // We want to accept empty value as valid or otherwise
        // datagrid will not show anything.
        if (string.IsNullOrEmpty(_customFilterValue))
            return true;

        return model.Equipo1?.Contains(_customFilterValue, StringComparison.OrdinalIgnoreCase) == true || model.Equipo2?.Contains(_customFilterValue, StringComparison.OrdinalIgnoreCase) == true;
    }

}