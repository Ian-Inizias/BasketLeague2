@page "/Arena"

@inject HttpClient Http
@inject IJSRuntime JsRuntime

@using BasketLeague2.Utils.Models
@using BasketLeague2.Utils.Utils

<h3>Arena</h3>

@if (_teams.Any())
{
    <div class="container">
        <div class="row">
            <div class="col">
                <label>TEAM 1</label>
                <select class="form-select" aria-label="Select team 1" @bind="@_team1">
                    @foreach (var t in _teams)
                    {
                        <option value="@t.Codigo">@t.NombreCompleto</option>
                    }
                </select>
            </div>
            <div class="col">
                <label>TEAM 2</label>
                <select class="form-select" aria-label="Select team 2" @bind="@_team2">
                    @foreach (var t in _teams)
                    {
                        <option value="@t.Codigo">@t.NombreCompleto</option>
                    }
                </select>
            </div>
        </div>
    </div>
}

<div class="d-grip">
    <button class="btn btn-primary" @onclick="SimulateGame">START GAME</button>
    <button class="btn btn-primary" @onclick="SimulateGameWithPlayers">START GAME WITH PLAYERS</button>
</div>

@if (_result != null)
{
    <div class="container">
        <div class="row">
            <div class="col">
                <label>@_result.Equipo1</label>
                <label>@_result.Resultado1</label>
            </div>
            <div class="col">
                <label>@_result.Equipo2</label>
                <label>@_result.Resultado2</label>
            </div>
        </div>
    </div>

    <button class="btn btn-primary" @onclick="CopyText">COPY JSON</button>
}

@code {
    private IEnumerable<Team> _teams = new Team[] { };
    private IEnumerable<Player> _players = new Player[] { };

    private int _team1;
    private int _team2;

    private Result? _result;
    private AdvancedResult? _aResult;

    private string _jsonResult = "";

    protected override async Task OnInitializedAsync()
    {
        await GetTeams();
        await GetPlayers();
    }

    private async Task GetTeams()
    {
        var t = await Http.GetFromJsonAsync<IEnumerable<Team>>("data/teams.json");
        _teams = _teams.Concat(t!.OrderBy(team => team.NombreCompleto));
        _team1 = _teams.First().Codigo;
        _team2 = _team1;
    }

    private async Task GetPlayers()
    {
        var p = await Http.GetFromJsonAsync<IEnumerable<Player>>("data/players.json");
        _players = _players.Concat(p!.OrderBy(player => player.Team));
    }

    private void SimulateGame()
    {
        var t1 = _teams.FirstOrDefault(t => t.Codigo == _team1);
        var t2 = _teams.FirstOrDefault(t => t.Codigo == _team2);

        if (t1 == null || t2 == null) return;

        _result = GameUtils.SimulateGame(t1, t2);

        _jsonResult = System.Text.Json.JsonSerializer.Serialize(new Result
        {
            Equipo1 = $"{_team1}",
            Equipo2 = $"{_team2}",
            Fecha = _result.Fecha,
            Resultado1 = _result.Resultado1,
            Resultado2 = _result.Resultado2
        });
    }

    private void SimulateGameWithPlayers()
    {
        var players1 = _players.Where(p => p.Team == _team1).ToList();
        var players2 = _players.Where(p => p.Team == _team2).ToList();

        _aResult = GameUtils.SimulateGameWithPlayers(players1, players2);
        _result = _aResult;

        _jsonResult = System.Text.Json.JsonSerializer.Serialize(new AdvancedResult
        {
            Equipo1 = $"{_team1}",
            Equipo2 = $"{_team2}",
            Fecha = _aResult.Fecha,
            Resultado1 = _aResult.Resultado1,
            Resultado2 = _aResult.Resultado2,
            Stats1 = _aResult.Stats1,
            Stats2 = _aResult.Stats2
        });
    }

    private async void CopyText()
    {
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", _jsonResult);
    }

}