@page "/Arena"

@inject HttpClient Http
@inject IJSRuntime JSRuntime

@using BasketLeague2.Utils.Models
@using BasketLeague2.Utils.Utils

<h3>Arena</h3>

@if (teams.Any())
{
    <div class="container">
        <div class="row">
            <div class="col">
                <label>TEAM 1</label>
                <select class="form-select" aria-label="Select team 1" @bind="@team1">
                    @foreach (var t in teams)
                    {
                        <option value="@t.Codigo">@t.NombreCompleto</option>
                    }
                </select>
            </div>
            <div class="col">
                <label>TEAM 2</label>
                <select class="form-select" aria-label="Select team 2" @bind="@team2">
                    @foreach (var t in teams)
                    {
                        <option value="@t.Codigo">@t.NombreCompleto</option>
                    }
                </select>
            </div>
        </div>
    </div>
}

<div class="d-grip">
    <button class="btn btn-primary" @onclick="SimulateGame">START GAME</button>
    <button class="btn btn-primary" @onclick="SimulateGameWithPlayers">START GAME WITH PLAYERS</button>
</div>

@if (result != null)
{
    <div class="container">
        <div class="row">
            <div class="col">
                <label>@result.Equipo1</label>
                <label>@result.Resultado1</label>
            </div>
            <div class="col">
                <label>@result.Equipo2</label>
                <label>@result.Resultado2</label>
            </div>
        </div>
    </div>

    <button class="btn btn-primary" @onclick="CopyText">COPY JSON</button>
}

@code {
    public IEnumerable<Team> teams = new Team[] { };
    public IEnumerable<Player> players = new Player[] { };

    public int team1;
    public int team2;

    public Result result = null;
    public AdvancedResult aResult = null;

    public string jsonResult = "";

    protected override async Task OnInitializedAsync()
    {
        await GetTeams();
        await GetPlayers();
    }

    private async Task GetTeams()
    {
        var t = await Http.GetFromJsonAsync<IEnumerable<Team>>("data/teams.json");
        teams = teams.Concat(t.OrderBy(t => t.NombreCompleto));
        team1 = teams.FirstOrDefault().Codigo;
        team2 = team1;
    }

    private async Task GetPlayers()
    {
        var p = await Http.GetFromJsonAsync<IEnumerable<Player>>("data/players.json");
        players = players.Concat(p.OrderBy(p => p.Team));
    }

    private void SimulateGame()
    {
        var t1 = teams.FirstOrDefault(t => t.Codigo == team1);
        var t2 = teams.FirstOrDefault(t => t.Codigo == team2);

        if (t1 != null && t2 != null)
        {
            result = GameUtils.SimulateGame(t1, t2);

            jsonResult = System.Text.Json.JsonSerializer.Serialize(new Result
            {
                Equipo1 = $"{team1}",
                Equipo2 = $"{team2}",
                Fecha = result.Fecha,
                Resultado1 = result.Resultado1,
                Resultado2 = result.Resultado2
            });
        }
    }

    private async void SimulateGameWithPlayers()
    {
        var players1 = players.Where(p => p.Team == team1).ToList();
        var players2 = players.Where(p => p.Team == team2).ToList();

        if (players1 != null && players2 != null)
        {
            aResult = GameUtils.SimulateGameWithPlayers(players1, players2);
            result = aResult;

            jsonResult = System.Text.Json.JsonSerializer.Serialize(new AdvancedResult
            {
                Equipo1 = $"{team1}",
                Equipo2 = $"{team2}",
                Fecha = aResult.Fecha,
                Resultado1 = aResult.Resultado1,
                Resultado2 = aResult.Resultado2,
                Stats1 = aResult.Stats1,
                Stats2 = aResult.Stats2
            });
        }
    }

    private async void CopyText()
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", jsonResult);
    }

}