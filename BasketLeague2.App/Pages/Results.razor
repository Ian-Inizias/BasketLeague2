@page "/Results"

@inject HttpClient Http

@using BasketLeague2.Utils.Models

<h3>Results</h3>

<table class="table table-striped">
    <thead class="thead-light">
        <tr>
            <th>
                FECHA
            </th>
            <th>
                EQUIPO 1
            </th>
            <th>
                PUNTUACIÓN
            </th>
            <th>
                EQUIPO 2
            </th>
            <th>
                PUNTUACIÓN
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var r in resultados)
        {
            <tr>
                <td>@r.Fecha</td>
                <td class="@(r.Resultado1 > r.Resultado2 ? "text-success" : "text-danger")">@r.Equipo1</td>
                <td>@r.Resultado1</td>
                <td class="@(r.Resultado1 < r.Resultado2 ? "text-success" : "text-danger")">@r.Equipo2</td>
                <td>@r.Resultado2</td>
            </tr>
        }
    </tbody>
</table>

@code {
    public List<Result> resultados = new();
    public List<Team> teams = new();

    protected override async Task OnInitializedAsync()
    {
        await GetTeams();

        await GetResults();
    }

    private async Task GetTeams()
    {
        var t = await Http.GetFromJsonAsync<IEnumerable<Team>>("data/teams.json");        
        teams.AddRange(t.OrderBy(t => t.NombreCompleto));
    }

    private async Task GetResults()
    {
        var r = await Http.GetFromJsonAsync<IEnumerable<Result>>("data/results.json");

        foreach(var result in r)
        {
            result.Equipo1 = teams.FirstOrDefault(t => t.Codigo == int.Parse(result.Equipo1)).NombreCompleto;
            result.Equipo2 = teams.FirstOrDefault(t => t.Codigo == int.Parse(result.Equipo2)).NombreCompleto;
        }

        resultados.AddRange(r.OrderBy(r => r.Fecha));
    }
}
