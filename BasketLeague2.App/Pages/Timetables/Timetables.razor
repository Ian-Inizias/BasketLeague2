@page "/Timetable/{Season}"
@using BasketLeague2.Utils.Models
@using Match = BasketLeague2.Utils.Models.Match
@using System.Globalization

@inject HttpClient Http

<PageTitle>Timetables</PageTitle>

<h3>Timetables</h3>

<TextEdit Style="width:25%" Text="@_customFilterValue" TextChanged="@OnCustomFilterValueChanged"></TextEdit>
<DataGrid @ref="_dataGrid"
          TItem="Match"
          Data="@_matches"
          Responsive
          Sortable
          ShowPager
          CustomFilter="@OnCustomFilter"
          ShowPageSizes
          PagerPosition="DataGridPagerPosition.Bottom"
          PagerOptions="new DataGridPagerOptions { ButtonSize = Size.Small }"
          SortMode="DataGridSortMode.Single"
          PageSize="5">
    <DataGridColumns>
        <DataGridCommandColumn/>
        <DataGridColumn Field="@nameof(Match.Fecha)" Caption="FECHA">
            <DisplayTemplate>@context.Fecha.ToShortDateString()</DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(Match.Equipo1)" Caption="EQUIPO 1"/>
        <DataGridColumn Field="@nameof(Match.Equipo2)" Caption="EQUIPO 2"/>
    </DataGridColumns>
    <PageButtonTemplate>
        <Span TextColor="TextColor.Success">
            @context.PageNumber
        </Span>
    </PageButtonTemplate>
    <NextPageButtonTemplate>
        <Icon Name="IconName.StepForward" TextColor="TextColor.Success"/>
    </NextPageButtonTemplate>
    <PreviousPageButtonTemplate>
        <Icon Name="IconName.StepBackward" TextColor="TextColor.Success"/>
    </PreviousPageButtonTemplate>
    <LastPageButtonTemplate>
        <Icon Name="IconName.Forward" TextColor="TextColor.Success"/>
    </LastPageButtonTemplate>
    <FirstPageButtonTemplate>
        <Icon Name="IconName.Backward" TextColor="TextColor.Success"/>
    </FirstPageButtonTemplate>
    <TotalItemsTemplate>
        <Badge Color="Color.Success">@context.TotalItems items</Badge>
    </TotalItemsTemplate>
    <TotalItemsShortTemplate>
        <Badge Color="Color.Success">@context.CurrentPageSize</Badge>
    </TotalItemsShortTemplate>
    <PageSelectorTemplate>
        <Select TextColor="TextColor.Success" @bind-SelectedValue="@context.CurrentPage" Size="Size.Small">
            @for (var i = context.FirstVisiblePage; i <= context.LastVisiblePage; ++i)
            {
                var pageNumber = i;

                <SelectItem Value="@pageNumber">@pageNumber</SelectItem>
            }
        </Select>
    </PageSelectorTemplate>
</DataGrid>

@code {

    [Parameter] public string Season { get; set; } = "";

    private IEnumerable<Team> _teams = new Team[] { };
    private IEnumerable<Match> _matches = new Match[] { };
    private DataGrid<Match> _dataGrid = new();
    private string _customFilterValue = "";

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetTeams();

        await GetTimeTables();

        StateHasChanged();
    }

    private async Task GetTeams()
    {
        _teams = new Team[] { };
        var t = await Http.GetFromJsonAsync<IEnumerable<Team>>("data/teams.json");
        _teams = _teams.Concat(t!.OrderBy(team => team.NombreCompleto));
    }

    private async Task GetTimeTables()
    {
        _matches = new List<Match>();
        var m = await Http.GetFromJsonAsync<List<Match>>($"data/matches/M_{Season}.json");

        foreach (var match in m!)
        {
            match.Equipo1 = _teams.First(t => t.Codigo == int.Parse(match.Equipo1)).NombreCompleto;
            match.Equipo2 = _teams.First(t => t.Codigo == int.Parse(match.Equipo2)).NombreCompleto;
        }

        _matches = _matches.Concat(m.OrderBy(match => match.Fecha));
    }

    private Task OnCustomFilterValueChanged(string e)
    {
        _customFilterValue = e;
        return _dataGrid.Reload();
    }

    private bool OnCustomFilter(Match model)
    {
        // We want to accept empty value as valid or otherwise
        // datagrid will not show anything.
        if (string.IsNullOrEmpty(_customFilterValue))
            return true;

        return model.Equipo1.Contains(_customFilterValue, StringComparison.OrdinalIgnoreCase) || model.Equipo2.Contains(_customFilterValue, StringComparison.OrdinalIgnoreCase) || model.Fecha.ToString(new CultureInfo("es-ES")).Contains(_customFilterValue, StringComparison.OrdinalIgnoreCase);
    }

}