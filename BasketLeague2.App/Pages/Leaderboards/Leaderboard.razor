@page "/Leaderboard/{Season}"

@inject HttpClient Http

@using BasketLeague2.Utils.Models

<h3>Leaderboard</h3>

<table class="table table-striped">
    <thead class="thead-light">
    <tr>
        <th>EQUIPO</th>
        <th>GP</th>
        <th>W</th>
        <th>L</th>
        <th>%</th>
        <th>HOME</th>
        <th>VISITOR</th>
        <th>DIF</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var t in _teams)
    {
        <tr>
            <td>@t.NombreCompleto</td>
            <td>@t.Gp</td>
            <td>@(t.Wh + t.Wv)</td>
            <td>@(t.Lh + t.Lv)</td>
            <td>@Math.Round((double)(t.Wh + t.Wv) / t.Gp, 4)</td>
            <td>@t.Wh - @t.Lh</td>
            <td>@t.Wv - @t.Lv</td>
            <td>@t.Dif</td>
        </tr>
    }
    </tbody>
</table>

@code {

    [Parameter] public string Season { get; set; } = "";

    private IEnumerable<Team> _teams = new Team[] { };
    private IEnumerable<Result> _results = new Result[] { };

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetTeams();
        await GetResults();

        CalculateStats();
    }

    private async Task GetTeams()
    {
        _teams = new Team[] { };
        var t = await Http.GetFromJsonAsync<IEnumerable<Team>>("data/teams.json");
        _teams = _teams.Concat(t!);
    }

    private async Task GetResults()
    {
        _results = new Result[] { };
        var r = await Http.GetFromJsonAsync<IEnumerable<Result>>($"data/results/R_{Season}.json");
        _results = _results.Concat(r!);
    }

    /// <summary>
    /// Calcula los detalles correspondientes a cada equipo, partidos jugados, victorias, derrotas y diferencia de puntos
    /// </summary>
    private void CalculateStats()
    {
        foreach (var t in _teams)
        {
            var personalResultsHome = _results.Where(r => int.Parse(r.Equipo1) == t.Codigo).ToList();
            var personalResultsVisitor = _results.Where(r => int.Parse(r.Equipo2) == t.Codigo).ToList();
            t.Gp = personalResultsHome.Count + personalResultsVisitor.Count;

            t.Wh = personalResultsHome.Count(r => int.Parse(r.Equipo1) == t.Codigo && r.Resultado1 > r.Resultado2);
            t.Lh = personalResultsHome.Count(r => int.Parse(r.Equipo1) == t.Codigo && r.Resultado1 < r.Resultado2);

            t.Wv = personalResultsVisitor.Count(r => int.Parse(r.Equipo2) == t.Codigo && r.Resultado2 > r.Resultado1);
            t.Lv = personalResultsVisitor.Count(r => int.Parse(r.Equipo2) == t.Codigo && r.Resultado2 < r.Resultado1);

            // Suma de todos tus resultados
            var t1 = personalResultsHome.Where(r => int.Parse(r.Equipo1) == t.Codigo).Sum(r => r.Resultado1);
            t1 += personalResultsVisitor.Where(r => int.Parse(r.Equipo2) == t.Codigo).Sum(r => r.Resultado2);

            // Suma de todos los resultados de los rivales
            var t2 = personalResultsHome.Where(r => int.Parse(r.Equipo1) == t.Codigo).Sum(r => r.Resultado2);
            t2 += personalResultsVisitor.Where(r => int.Parse(r.Equipo2) == t.Codigo).Sum(r => r.Resultado1);

            t.Dif = t1 - t2;
        }

        _teams = _teams.OrderByDescending(t => t.Wh + t.Wv).ThenByDescending(t => t.Dif);
    }

}