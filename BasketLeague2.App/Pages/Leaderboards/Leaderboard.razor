@page "/Leaderboard/{Season}"

@inject HttpClient Http

@using BasketLeague2.Utils.Models

<h3>Leaderboard</h3>

<table class="table table-striped">
    <thead class="thead-light">
    <tr>
        <th>EQUIPO</th>
        <th>GP</th>
        <th>W</th>
        <th>L</th>
        <th>%</th>
        <th>HOME</th>
        <th>VISITOR</th>
        <th>DIF</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var t in _teams)
    {
        <tr>
            <td>@t.NombreCompleto</td>
            <td>@t.GP</td>
            <td>@(t.WH + t.WV)</td>
            <td>@(t.LH + t.LV)</td>
            <td>@Math.Round((double)(t.WH + t.WV) / (double)t.GP, 4)</td>
            <td>
                @t.WH - @t.LH
            </td>
            <td>
                @t.WV - @t.LV
            </td>
            <td>@t.DIF</td>
        </tr>
    }
    </tbody>
</table>

@code {

    [Parameter] public string Season { get; set; }

    private IEnumerable<Team> _teams = new Team[] { };
    private IEnumerable<Result> _results = new Result[] { };

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await GetTeams();
        await GetResults();

        CalculateStats();
    }

    private async Task GetTeams()
    {
        _teams = new Team[] { };
        var t = await Http.GetFromJsonAsync<IEnumerable<Team>>("data/teams.json");
        _teams = _teams.Concat(t);
    }

    private async Task GetResults()
    {
        _results = new Result[] { };
        var r = await Http.GetFromJsonAsync<IEnumerable<Result>>($"data/results/R_{Season}.json");
        _results = _results.Concat(r);
    }

    /// <summary>
    /// Calcula los detalles correspondientes a cada equipo, partidos jugados, victorias, derrotas y diferencia de puntos
    /// </summary>
    private void CalculateStats()
    {
        foreach (var t in _teams)
        {
            var personalResultsHome = _results.Where(r => int.Parse(r.Equipo1) == t.Codigo);
            var personalResultsVisitor = _results.Where(r => int.Parse(r.Equipo2) == t.Codigo);
            t.GP = personalResultsHome.Count() + personalResultsVisitor.Count();

            t.WH = personalResultsHome.Count(r => int.Parse(r.Equipo1) == t.Codigo && r.Resultado1 > r.Resultado2);
            t.LH = personalResultsHome.Count(r => int.Parse(r.Equipo1) == t.Codigo && r.Resultado1 < r.Resultado2);

            t.WV = personalResultsVisitor.Count(r => int.Parse(r.Equipo2) == t.Codigo && r.Resultado2 > r.Resultado1);
            t.LV = personalResultsVisitor.Count(r => int.Parse(r.Equipo2) == t.Codigo && r.Resultado2 < r.Resultado1);

            // Suma de todos tus resultados
            var t1 = personalResultsHome.Where(r => int.Parse(r.Equipo1) == t.Codigo).Sum(r => r.Resultado1);
            t1 += personalResultsVisitor.Where(r => int.Parse(r.Equipo2) == t.Codigo).Sum(r => r.Resultado2);

            // Suma de todos los resultados de los rivales
            var t2 = personalResultsHome.Where(r => int.Parse(r.Equipo1) == t.Codigo).Sum(r => r.Resultado2);
            t2 += personalResultsVisitor.Where(r => int.Parse(r.Equipo2) == t.Codigo).Sum(r => r.Resultado1);

            t.DIF = t1 - t2;
        }

        _teams = _teams.OrderByDescending(t => t.WH + t.WV).ThenByDescending(t => t.DIF);
    }

}