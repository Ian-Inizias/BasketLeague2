@page "/Leaderboard/{Season}"

@inject HttpClient Http

@using BasketLeague2.Utils.Models

<PageTitle>Leaderboard</PageTitle>

<h3>Leaderboard</h3>

<Table Striped>
    <TableHeader ThemeContrast="ThemeContrast.Light">
        <TableRow>
            <TableHeaderCell>EQUIPO</TableHeaderCell>
            <TableHeaderCell>GP</TableHeaderCell>
            <TableHeaderCell>W</TableHeaderCell>
            <TableHeaderCell>L</TableHeaderCell>
            <TableHeaderCell>%</TableHeaderCell>
            <TableHeaderCell>HOME</TableHeaderCell>
            <TableHeaderCell>VISITOR</TableHeaderCell>
            <TableHeaderCell>DIF</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        @foreach (var t in _teams)
        {
            <TableRow>
                <TableRowCell>@t.NombreCompleto</TableRowCell>
                <TableRowCell>@t.Gp</TableRowCell>
                <TableRowCell>@(t.Wh + t.Wv)</TableRowCell>
                <TableRowCell>@(t.Lh + t.Lv)</TableRowCell>
                <TableRowCell>@Math.Round((double)(t.Wh + t.Wv) / t.Gp, 4)</TableRowCell>
                <TableRowCell>@t.Wh - @t.Lh</TableRowCell>
                <TableRowCell>@t.Wv - @t.Lv</TableRowCell>
                <TableRowCell>@t.Dif</TableRowCell>
            </TableRow>
        }
    </TableBody>
</Table>

@code {

    [Parameter] public string Season { get; set; } = "";

    private IEnumerable<Team> _teams = new Team[] { };
    private IEnumerable<Result> _results = new Result[] { };

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetTeams();
        await GetResults();

        CalculateStats2();
    }

    private async Task GetTeams()
    {
        _teams = new Team[] { };
        var t = await Http.GetFromJsonAsync<IEnumerable<Team>>("data/teams.json");
        _teams = _teams.Concat(t!);
    }

    private async Task GetResults()
    {
        _results = new Result[] { };
        var r = await Http.GetFromJsonAsync<IEnumerable<Result>>($"data/results/R_{Season}.json");
        _results = _results.Concat(r!);
    }

    /// <summary>
    /// Calcula los detalles correspondientes a cada equipo, partidos jugados, victorias, derrotas y diferencia de puntos
    /// </summary>
    private void CalculateStats()
    {
        foreach (var t in _teams)
        {
            var personalResultsHome = _results.Where(r => int.Parse(r.Equipo1) == t.Codigo).ToList();
            var personalResultsVisitor = _results.Where(r => int.Parse(r.Equipo2) == t.Codigo).ToList();
            t.Gp = personalResultsHome.Count + personalResultsVisitor.Count;

            t.Wh = personalResultsHome.Count(r => int.Parse(r.Equipo1) == t.Codigo && r.Resultado1 > r.Resultado2);
            t.Lh = personalResultsHome.Count(r => int.Parse(r.Equipo1) == t.Codigo && r.Resultado1 < r.Resultado2);

            t.Wv = personalResultsVisitor.Count(r => int.Parse(r.Equipo2) == t.Codigo && r.Resultado2 > r.Resultado1);
            t.Lv = personalResultsVisitor.Count(r => int.Parse(r.Equipo2) == t.Codigo && r.Resultado2 < r.Resultado1);

            // Suma de todos tus resultados
            var t1 = personalResultsHome.Where(r => int.Parse(r.Equipo1) == t.Codigo).Sum(r => r.Resultado1);
            t1 += personalResultsVisitor.Where(r => int.Parse(r.Equipo2) == t.Codigo).Sum(r => r.Resultado2);

            // Suma de todos los resultados de los rivales
            var t2 = personalResultsHome.Where(r => int.Parse(r.Equipo1) == t.Codigo).Sum(r => r.Resultado2);
            t2 += personalResultsVisitor.Where(r => int.Parse(r.Equipo2) == t.Codigo).Sum(r => r.Resultado1);

            t.Dif = t1 - t2;
        }

        _teams = _teams.OrderByDescending(t => t.Wh + t.Wv).ThenByDescending(t => t.Dif);
    }
    
    private void CalculateStats2()
    {
        foreach (var t in _teams)
        {
            int gamesPlayed = 0, winsHome = 0, lossesHome = 0, winsVisitor = 0, lossesVisitor = 0;
            int pointsScored = 0, pointsConceded = 0;

            foreach (var r in _results)
            {
                var equipo1 = int.Parse(r.Equipo1);
                var equipo2 = int.Parse(r.Equipo2);

                if (equipo1 == t.Codigo)
                {
                    gamesPlayed++;
                    pointsScored += r.Resultado1;
                    pointsConceded += r.Resultado2;

                    if (r.Resultado1 > r.Resultado2)
                        winsHome++;
                    else if (r.Resultado1 < r.Resultado2)
                        lossesHome++;
                }
                else if (equipo2 == t.Codigo)
                {
                    gamesPlayed++;
                    pointsScored += r.Resultado2;
                    pointsConceded += r.Resultado1;

                    if (r.Resultado2 > r.Resultado1)
                        winsVisitor++;
                    else if (r.Resultado2 < r.Resultado1)
                        lossesVisitor++;
                }
            }

            t.Gp = gamesPlayed;
            t.Wh = winsHome;
            t.Lh = lossesHome;
            t.Wv = winsVisitor;
            t.Lv = lossesVisitor;
            t.Dif = pointsScored - pointsConceded;
        }

        _teams = _teams.OrderByDescending(t => t.Wh + t.Wv).ThenByDescending(t => t.Dif).ToList();
    }


}